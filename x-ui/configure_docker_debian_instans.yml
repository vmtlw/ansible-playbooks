---
- name: Configure Xray server in docker ( all-in-one )
  hosts: all
  become: true
  vars_files:
    - vars.yml

  tasks:
    
    - name: Set password for root
      ansible.builtin.user:
        name: root
        password: "{{ password_root | password_hash('sha512') }}"
      become: true
      changed_when: false

    - name: Set sysctl parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
      loop:
        - { name: 'net.ipv4.conf.all.forwarding', value: 1 }
        - { name: 'net.ipv6.conf.all.forwarding', value: 1 }
        - { name: 'net.ipv4.ip_forward', value: 1 }
        - { name: 'net.core.default_qdisc', value: 'fq' }
        # only for linux kernel  6.0 =<
        - { name: 'net.ipv4.tcp_congestion_control', value: 'bbr' }

    - name: Create configuration directory if not exists
      ansible.builtin.file:
        path: /usr/local/docker/x-ui
        state: directory
        owner: root
        group: root
        mode: '0755'
    
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/{{ ansible_os_family | lower }}/gpg
        state: present

    - name: Add docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/{{ ansible_os_family | lower }} {{ ansible_distribution_release }} stable"
        state: present

    - name: Ensure required packages are installed
      ansible.builtin.package:
        name:
          - bash-completion
          - neovim
          - git
          - gnupg-agent
          - software-properties-common
          - tree
          - whois
          - docker
          - docker-compose-plugin
          - iptables-persistent
        state: present
        update_cache: true

    - name: enable and aviable kernel modules for docker host
      community.general.modprobe:
        name: "{{ item }}"
        persistent: "present"
        state: "present"
      loop:
        - "br_netfilter"
        - "ip_tables"
        - "nf_conntrack_netlink"
        - "nf_nat"
        - "overlay"
        - "xt_conntrack"
  

    - name: Copy configuration files to /usr/local/docker/x-ui
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: '0644'
      loop:
        - { src: 'templates/docker-compose.yml.j2', dest: '/usr/local/docker/x-ui/docker-compose.yml' }
        - { src: 'templates/env.j2', dest: '/usr/local/docker/x-ui/.env' }
        - { src: 'templates/traefik.yml.j2', dest: '/usr/local/docker/x-ui/traefik.yml' }
     
    - name: Uncomment history-search-backward lines with pgup/pgdown in /etc/inputrc
      template:
        src: templates/inputrc.j2
        dest: /etc/inputrc
      when: ansible_distribution_major_version | int < 12

    - block:  
      - name: Set Polycy
        ansible.builtin.iptables:
          chain: "{{ item }}"
          policy: ACCEPT
        with_items: ["INPUT", "FORWARD", "OUTPUT"]

      - name: Flush all
        ansible.builtin.iptables:
          chain: "{{ item }}"
          flush: yes
        with_items: ["INPUT", "FORWARD", "OUTPUT"]

      - name: Flush nat
        ansible.builtin.iptables:
          chain: "{{ item }}"
          flush: yes
          table: nat
        with_items: [ "INPUT", "OUTPUT", "PREROUTING", "POSTROUTING" ]
       
      - name: Allow related and established connections
        ansible.builtin.iptables:
          chain: INPUT
          ctstate: ESTABLISHED,RELATED
          jump: ACCEPT

      - name: deny PING
        ansible.builtin.iptables:
          chain: INPUT
          protocol: icmp
          jump: DROP

      - name: Set tcp flags
        ansible.builtin.iptables:
          chain: OUTPUT
          jump: DROP
          protocol: tcp
          tcp_flags:
            flags: ALL
            flags_set:
              - ACK
              - RST
              - SYN
              - FIN
          
      - name: allow 22, 80, 443, 54320, 54327, 54328 ports
        ansible.builtin.iptables:
          chain: INPUT
          protocol: tcp
          destination_ports:
           - "22"
           - "80"
           - "443"
           - "54320"
           - "54327"
           - "54328"
          jump: ACCEPT

      - name: Drop others input
        ansible.builtin.iptables:
          chain: INPUT
          jump: DROP
     
      
    - name: Ensure docker service is enabled and started
      ansible.builtin.service:
        name: docker
        enabled: true
        state: started

    - name: down existing services
      community.docker.docker_compose_v2:
        project_src: /usr/local/docker/x-ui
        state: absent

    - name: Start Docker containers
      community.docker.docker_compose_v2:
        project_src: /usr/local/docker/x-ui
        state: present

    - name: Save current state of the firewall in system file for ipv4
      community.general.iptables_state:
        state: saved
        path: /etc/iptables/rules.v4


    - name: Save current state of the firewall in system file for ipv6
      community.general.iptables_state:
        state: saved
        path: /etc/iptables/rules.v6
