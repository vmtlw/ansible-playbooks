---
- name: Configure Xray server in docker ( all-in-one )
  hosts: all
  become: true
  vars_files:
    - vars.yml

  tasks:
    
    - name: Set password for root
      ansible.builtin.user:
        name: root
        password: "{{ password_root | password_hash('sha512') }}"
      become: true
      changed_when: false

    - name: Set sysctl parameters
      sysctl:
        name: '{{ item.name }}'
        value: '{{ item.value }}'
        sysctl_set: yes
        state: present
        reload: yes
      loop:
        - { name: 'net.ipv4.conf.all.forwarding', value: 1 }
        - { name: 'net.ipv6.conf.all.forwarding', value: 1 }
        - { name: 'net.ipv4.ip_forward', value: 1 }
        - { name: 'net.core.default_qdisc', value: 'fq' }
        # only for linux kernel  6.0 =<
        - { name: 'net.ipv4.tcp_congestion_control', value: 'bbr' }

    - name: enable and aviable kernel modules for docker host
      community.general.modprobe:
        name: '{{ item }}'
        persistent: 'present'
        state: 'present'
      loop:
        - 'br_netfilter'
        - 'ip_tables'
        - 'nf_conntrack_netlink'
        - 'nf_nat'
        - 'overlay'
        - 'xt_conntrack'

    - block:  
      - name: Set Default Polycy
        ansible.builtin.iptables:
          chain: '{{ item }}'
          policy: ACCEPT
        with_items: ['INPUT', 'FORWARD', 'OUTPUT']

      - name: Flush INPUT FORWARD OUTPUT
        ansible.builtin.iptables:
          chain: '{{ item }}'
          flush: yes
        with_items: ['INPUT', 'FORWARD', 'OUTPUT']

      - name: Flush nat INPUT OUTPUT PREROUTING POSTROUTING
        ansible.builtin.iptables:
          chain: '{{ item }}'
          flush: yes
          table: nat
        with_items: [ 'INPUT', 'OUTPUT', 'PREROUTING', 'POSTROUTING' ]
       
      - name: Allow related and established connections
        ansible.builtin.iptables:
          chain: INPUT
          ctstate: ESTABLISHED,RELATED
          jump: ACCEPT

      - name: deny PING
        ansible.builtin.iptables:
          chain: INPUT
          protocol: icmp
          jump: DROP

      - name: Set tcp flags
        ansible.builtin.iptables:
          chain: OUTPUT
          jump: DROP
          protocol: tcp
          tcp_flags:
            flags: ALL
            flags_set:
              - ACK
              - RST
              - SYN
              - FIN
          
      - name: allow 22, 80, 443, 54320, 54327, 54328 ports
        ansible.builtin.iptables:
          chain: INPUT
          protocol: tcp
          destination_ports:
           - '22'
           - '80'
           - '443'
           - '54320'
           - '54327'
           - '54328'
          jump: ACCEPT

      - name: Allow forwarding for docker networks (br-*)
        ansible.builtin.iptables:
          chain: forward
          in_interface: "{{ ansible_default_ipv4.interface }}"
          out_interface: br-+
          jump: accept


      - name: Drop others input
        ansible.builtin.iptables:
          chain: INPUT
          jump: DROP

      - name: Save current state of the firewall in system file for ipv4
        community.general.iptables_state:
          state: saved
          path: /etc/iptables/rules.v4

      - name: Save current state of the firewall in system file for ipv6
        community.general.iptables_state:
          ip_version: ipv6
          state: saved
          path: /etc/iptables/rules.v6
      
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/{{ ansible_os_family | lower }}/gpg
        state: present

    - name: Add docker repository
      apt_repository:
        repo: 'deb [arch=amd64] https://download.docker.com/linux/{{ ansible_os_family | lower }} {{ ansible_distribution_release }} stable'
        state: present

    - name: Ensure required packages are installed
      ansible.builtin.package:
        name:
          - bash-completion
          - neovim
          - git
          - gnupg-agent
          - software-properties-common
          - tree
          - whois
          - docker
          - docker-compose-plugin
          - iptables-persistent
          - zram-tools
          - zstd
        state: present
        update_cache: true

    - name: enable and aviable kernel modules for zram
      community.general.modprobe:
        name: 'zram'
        persistent: 'present'
        state: 'present'
  
    - name: create zram config (/etc/default/zramswap)
      ansible.builtin.copy:
        dest: /etc/default/zramswap
        content: |
          ALGO=zstd
          PERCENT=200
    
    - name: reload permanently zramswap
      ansible.builtin.service:
        name: zramswap
        enabled: true
        state: reloaded

    - name: Create configuration directory if not exists
      ansible.builtin.file:
        path: /usr/local/docker/x-ui
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy configuration files to /usr/local/docker/x-ui
      ansible.builtin.template:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
        owner: root
        group: root
        mode: '0644'
      loop:
        - { src: 'templates/docker-compose.yml.j2', dest: '/usr/local/docker/x-ui/docker-compose.yml' }
        - { src: 'templates/env.j2', dest: '/usr/local/docker/x-ui/.env' }
        - { src: 'templates/traefik.yml.j2', dest: '/usr/local/docker/x-ui/traefik.yml' }
     
    - name: Uncomment history-search-backward lines with pgup/pgdown in /etc/inputrc
      template:
        src: templates/inputrc.j2
        dest: /etc/inputrc
      when: ansible_distribution_major_version | int < 12

    - name: Ensure docker service is enabled and started
      ansible.builtin.service:
        name: docker
        enabled: true
        state: started

    - name: simular docker compose down in /usr/local/docker/x-ui
      community.docker.docker_compose_v2:
        project_src: /usr/local/docker/x-ui
        state: absent

    - name: Start Docker containers
      community.docker.docker_compose_v2:
        project_src: /usr/local/docker/x-ui
        state: present

